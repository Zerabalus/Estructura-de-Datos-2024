diff --git a/src/main/java/mx/unam/ciencias/edd/Lista.java b/src/main/java/mx/unam/ciencias/edd/Lista.java
index c46daab..d186818 100644
--- a/src/main/java/mx/unam/ciencias/edd/Lista.java
+++ b/src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -28,6 +28,7 @@ public class Lista<T> implements Coleccion<T> {
         /* Construye un nodo con un elemento. */
         private Nodo(T elemento) {
             // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -41,36 +42,59 @@ public class Lista<T> implements Coleccion<T> {
         /* Construye un nuevo iterador. */
         private Iterador() {
             // Aquí va su código.
+            start();
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
             // Aquí va su código.
+            return siguiente != null;
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
             // Aquí va su código.
+            if (!hasNext())
+                throw new NoSuchElementException();
+            else {
+                T elem = siguiente.elemento;
+                anterior = siguiente;
+                siguiente = siguiente.siguiente;
+                return elem;
+            }
         }
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
             // Aquí va su código.
+            return anterior != null;
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
             // Aquí va su código.
+            if (!hasPrevious())
+                throw new NoSuchElementException();
+            else {
+                T elem = anterior.elemento;
+                siguiente = anterior;
+                anterior = anterior.anterior;
+                return elem;
+            }            
         }
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
             // Aquí va su código.
+            anterior = null;
+            siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
             // Aquí va su código.
+            siguiente = null;
+            anterior = rabo;
         }
     }
 
@@ -88,6 +112,7 @@ public class Lista<T> implements Coleccion<T> {
      */
     public int getLongitud() {
         // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -97,6 +122,7 @@ public class Lista<T> implements Coleccion<T> {
      */
     @Override public int getElementos() {
         // Aquí va su código.
+        return getLongitud();
     }
 
     /**
@@ -106,6 +132,10 @@ public class Lista<T> implements Coleccion<T> {
      */
     @Override public boolean esVacia() {
         // Aquí va su código.
+        if (cabeza == null && rabo == null && longitud == 0)
+            return true;
+        else
+            return false;  
     }
 
     /**
@@ -118,6 +148,22 @@ public class Lista<T> implements Coleccion<T> {
      */
     @Override public void agrega(T elemento) {
         // Aquí va su código.
+        if(elemento == null){
+            throw new IllegalArgumentException();
+        }
+        Nodo n = new Nodo(elemento);
+        if (esVacia()){
+            cabeza = rabo = n;
+            longitud = 1;
+            return;
+        }
+        else {
+            rabo.siguiente = n;
+            n.anterior = rabo;
+            rabo = n;
+            longitud++;
+        }
+
     }
 
     /**
@@ -129,6 +175,7 @@ public class Lista<T> implements Coleccion<T> {
      */
     public void agregaFinal(T elemento) {
         // Aquí va su código.
+        agrega(elemento);
     }
 
     /**
@@ -140,6 +187,21 @@ public class Lista<T> implements Coleccion<T> {
      */
     public void agregaInicio(T elemento) {
         // Aquí va su código.
+        if (elemento == null){
+            throw new IllegalArgumentException("Elemento invalido");
+        }
+        Nodo n = new Nodo(elemento);
+        if (esVacia()){
+            cabeza = rabo = n;
+            longitud = 1;
+            return;
+        }
+        else {
+            cabeza.anterior = n;
+            n.siguiente = cabeza;
+            cabeza = n;
+            longitud++;
+        }
     }
 
     /**
@@ -159,6 +221,32 @@ public class Lista<T> implements Coleccion<T> {
      */
     public void inserta(int i, T elemento) {
         // Aquí va su código.
+        if (elemento == null){
+            throw new IllegalArgumentException();
+        }
+
+        else if (i <= 0){
+            agregaInicio(elemento);
+            return;
+        }
+        else if (longitud <= i){
+            agregaFinal(elemento);
+            return;
+        }
+
+        Iterador it = new Iterador();
+        for (int nodo = 0; nodo < i; nodo++) {
+            it.next();
+        }
+
+        Nodo nuevoNodo = new Nodo(elemento);
+        Nodo aux = it.siguiente;
+        nuevoNodo.anterior = aux.anterior;
+        nuevoNodo.siguiente = aux;
+        aux.anterior.siguiente = nuevoNodo;
+        aux.anterior = nuevoNodo;
+        longitud++;
+    
     }
 
     /**
@@ -166,8 +254,32 @@ public class Lista<T> implements Coleccion<T> {
      * lista, el método no la modifica.
      * @param elemento el elemento a eliminar.
      */
-    @Override public void elimina(T elemento) {
+    @Override
+    public void elimina(T elemento) {
         // Aquí va su código.
+        if (esVacia()) {
+            return;
+        }
+        if (cabeza.elemento.equals(elemento)) {
+            eliminaPrimero();
+            return;
+        }
+        Iterador it= new Iterador();
+        while (it.hasNext()) {
+            if (it.siguiente == rabo && it.siguiente.elemento.equals(elemento)) {
+                eliminaUltimo();
+                return;
+            }
+            if (it.siguiente.elemento.equals(elemento)) {
+                Nodo anterior = it.anterior;
+                Nodo siguiente = it.siguiente.siguiente;
+                anterior.siguiente = siguiente;
+                siguiente.anterior = anterior;
+                longitud--;
+                return;
+            }
+            it.next();
+        }
     }
 
     /**
@@ -177,6 +289,19 @@ public class Lista<T> implements Coleccion<T> {
      */
     public T eliminaPrimero() {
         // Aquí va su código.
+        if(esVacia()){
+            throw new NoSuchElementException();
+        }
+        T cAnt = cabeza.elemento;
+        if(cabeza.siguiente == null){
+            limpia();
+            return cAnt;
+        }
+        Nodo n = cabeza.siguiente;
+        n.anterior = null;
+        cabeza = n;
+        longitud--;
+        return cAnt;
     }
 
     /**
@@ -186,6 +311,18 @@ public class Lista<T> implements Coleccion<T> {
      */
     public T eliminaUltimo() {
         // Aquí va su código.
+        if(esVacia()){
+            throw new NoSuchElementException();
+        }
+        T rAnt = rabo.elemento;
+        if(rabo.anterior == null){
+            limpia();
+            return rAnt;
+        }
+        rabo = rabo.anterior;
+        rabo.siguiente = null;
+        longitud--;
+        return rAnt;
     }
 
     /**
@@ -196,6 +333,13 @@ public class Lista<T> implements Coleccion<T> {
      */
     @Override public boolean contiene(T elemento) {
         // Aquí va su código.
+        Iterador it= new Iterador();
+        while(it.hasNext()){
+            if(it.next().equals(elemento)){
+                return true;
+            }
+        }
+        return false;
     }
 
     /**
@@ -204,6 +348,13 @@ public class Lista<T> implements Coleccion<T> {
      */
     public Lista<T> reversa() {
         // Aquí va su código.
+        Lista<T> lista = new Lista<T>();
+        Iterador itResultado = new Iterador();
+        itResultado.end();
+        while(itResultado.hasPrevious()){
+            lista.agrega(itResultado.previous());
+        }
+        return lista;
     }
 
     /**
@@ -212,14 +363,22 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+    // Aquí va su código.
+    Lista<T> lista = new Lista<>();
+        Iterador nuevo = new Iterador();
+        while(nuevo.hasNext()){
+            lista.agrega(nuevo.next());
+        }
+        return lista;
     }
-
+        
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
         // Aquí va su código.
+        cabeza = rabo = null;
+        longitud = 0;
     }
 
     /**
@@ -229,6 +388,10 @@ public class Lista<T> implements Coleccion<T> {
      */
     public T getPrimero() {
         // Aquí va su código.
+        if(cabeza == null){
+            throw new NoSuchElementException();
+        }
+        return (longitud != 0) ? cabeza.elemento : null;
     }
 
     /**
@@ -238,6 +401,10 @@ public class Lista<T> implements Coleccion<T> {
      */
     public T getUltimo() {
         // Aquí va su código.
+        if(cabeza == null){
+            throw new NoSuchElementException();
+        }
+        return rabo.elemento;
     }
 
     /**
@@ -249,6 +416,15 @@ public class Lista<T> implements Coleccion<T> {
      */
     public T get(int i) {
         // Aquí va su código.
+        if(longitud <= i || i < 0){
+            throw new ExcepcionIndiceInvalido();
+        }
+        Iterador it = new Iterador();
+        T elem = null;
+        for(int n = 0; n<=i; n++){
+            elem = it.next();
+        }
+        return elem;
     }
 
     /**
@@ -259,6 +435,13 @@ public class Lista<T> implements Coleccion<T> {
      */
     public int indiceDe(T elemento) {
         // Aquí va su código.
+        Iterador it = new Iterador();
+        for(int i = 0; i<longitud; i++){
+            if(it.next().equals(elemento)){
+                return i;
+            }
+        }
+        return -1;
     }
 
     /**
@@ -267,19 +450,49 @@ public class Lista<T> implements Coleccion<T> {
      */
     @Override public String toString() {
         // Aquí va su código.
+        if (esVacia())
+            return "[]";
+        else {
+            String s = "[";
+            int indice = 0;
+            return s + auxToString(indice) + "]";
+        }
+    }
+
+    private String auxToString(int indice) {
+        if (indice == longitud - 1)
+            return String.format("%s", get(indice));
+        return String.format("%s, ", get(indice)) + auxToString(indice + 1);
     }
 
     /**
      * Nos dice si la lista es igual al objeto recibido.
+     * 
      * @param objeto el objeto con el que hay que comparar.
      * @return <code>true</code> si la lista es igual al objeto recibido;
      *         <code>false</code> en otro caso.
      */
-    @Override public boolean equals(Object objeto) {
+    @Override
+    public boolean equals(Object objeto) {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
-        @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
+        @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>) objeto;
         // Aquí va su código.
+        if (lista == null)
+            return false;
+        else if (lista.getLongitud() != longitud)
+            return false;
+        else if (lista.getLongitud() == 0 && longitud == 0)
+            return true;
+        Nodo nodo = cabeza;
+        int i = 0;
+        while (nodo != null) {
+            if (nodo.elemento.equals(lista.get(i)) == false)
+                return false;
+            nodo = nodo.siguiente;
+            i++;
+        }
+        return true;
     }
 
     /**
